/* -*- Mode: C; c-basic-offset:4 ; -*- */
/*
 *  (C) 2017 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */

#include "hydra_bstrap.h"
#include "hydra_bstrap_common.h"
#include "hydra_sock.h"
#include "hydra_demux.h"
#include "hydra_spawn.h"
#include "hydra_str.h"
#include "hydra_tree.h"
#include "hydra_err.h"
#include "hydra_mem.h"
#include "hydra_hash.h"
#include "utlist.h"

/* *INDENT-OFF* */
@hydra_bstrap_includes@

static const char *bstrap_names[] = { @hydra_bstrap_names@ };
static HYD_status(*bstrap_launch_fns[])(const char *hostname, const char *launch_exec,
                                        char **args, int *fd_stdin, int *fd_stdout, int *fd_stderr,
                                        int *pid, int debug) =
{ @hydra_bstrap_launch_fns@ };
static HYD_status(*bstrap_finalize_fns[])(void) = { @hydra_bstrap_finalize_fns@ };
/* *INDENT-ON* */

struct bstrap_control {
    int pgid;
    int my_proxy_id;
    int total_downstreams;
    struct HYD_int_hash *fd_control_hash;
    struct HYD_int_hash *real_proxy_id_hash;
    int current_downstreams;
};

int HYD_bstrap_query_avail(const char *bstrap)
{
    int i;

    for (i = 0; bstrap_names[i]; i++)
        if (!strcmp(bstrap, bstrap_names[i]))
            return 1;

    return 0;
}

static HYD_status enqueue_control_fd(int fd_control, struct bstrap_control *bstrap_control)
{
    struct HYDI_bstrap_cmd cmd;
    int recvd, closed;
    struct HYD_int_hash *hash, *real_proxy_hash;
    HYD_status status = HYD_SUCCESS;

    HYD_FUNC_ENTER();

    status =
        HYD_sock_read(fd_control, &cmd, sizeof(cmd), &recvd, &closed, HYD_SOCK_COMM_TYPE__BLOCKING);
    HYD_ERR_POP(status, "socket read error\n");
    HYD_ASSERT(!closed, status);

    /* the first command coming in should be the proxy ID */
    HYD_ASSERT(cmd.type == HYDI_BSTRAP_CMD__PROXY_ID, status);

    HASH_FIND_INT(bstrap_control->real_proxy_id_hash, &cmd.u.proxy_id.id, real_proxy_hash);
    HYD_ASSERT(real_proxy_hash->val < bstrap_control->total_downstreams, status);

    HYD_MALLOC(hash, struct HYD_int_hash *, sizeof(struct HYD_int_hash), status);
    hash->key = fd_control;
    hash->val = real_proxy_hash->val;
    HASH_ADD_INT(bstrap_control->fd_control_hash, key, hash, MPL_MEM_PM);

    bstrap_control->current_downstreams++;

  fn_exit:
    HYD_FUNC_EXIT();
    return status;

  fn_fail:
    goto fn_exit;
}

static HYD_status listen_cb(int fd, HYD_dmx_event_t events, void *userp)
{
    int accept_fd;
    struct bstrap_control *bstrap_control;
    HYD_status status = HYD_SUCCESS;

    HYD_FUNC_ENTER();

    bstrap_control = (struct bstrap_control *) userp;

    status = HYD_sock_accept(fd, &accept_fd);
    HYD_ERR_POP(status, "accept error\n");

    status = enqueue_control_fd(accept_fd, bstrap_control);
    HYD_ERR_POP(status, "error enqueuing control fd\n");

  fn_exit:
    HYD_FUNC_EXIT();
    return status;

  fn_fail:
    goto fn_exit;
}

HYD_status HYD_bstrap_setup(const char *path, const char *launcher, const char *launcher_exec,
                            int num_nodes, struct HYD_node *node_list, int my_proxy_id,
                            const char *port_range, char *const *const pmi_args, int pgid,
                            int *num_downstream, int *downstream_stdin,
                            struct HYD_int_hash **downstream_stdout_hash,
                            struct HYD_int_hash **downstream_stderr_hash,
                            struct HYD_int_hash **downstream_fd_hash, int **downstream_proxy_id,
                            int **downstream_pid, int debug, int tree_width)
{
    char *targs[HYD_NUM_TMP_STRINGS] = { NULL };
    char *tmp[HYD_NUM_TMP_STRINGS] = { NULL };
    char *bstrap_launcher;
    int i, j, k, m;
    int fd_stdin, fd_stdout, fd_stderr, *proxy_id, *pid;
    int listen_fd;
    uint16_t port;
    char *localhost;
    int subtree_size;
    struct HYDI_bstrap_cmd cmd;
    int sent, closed;
    int total_core_count;
    struct bstrap_control *bstrap_control;
    struct HYD_int_hash *hash, *thash;
    struct HYD_int_hash *fd_stdout_hash = NULL;
    struct HYD_int_hash *fd_stderr_hash = NULL;
    HYD_status status = HYD_SUCCESS;

    HYD_FUNC_ENTER();

    /* create the bstrap proxy string */
    i = 0;
    tmp[i++] = MPL_strdup(path);
    tmp[i++] = MPL_strdup("/");
    tmp[i++] = MPL_strdup(HYDRA_BSTRAP_PROXY);
    tmp[i++] = NULL;

    status = HYD_str_alloc_and_join(tmp, &bstrap_launcher);
    HYD_ERR_POP(status, "unable to join strings\n");
    HYD_str_free_list(tmp);


    /* figure out the structure of our tree and how many direct
     * downstream processes we will have */
    if (num_nodes <= tree_width)
        (*num_downstream) = num_nodes;
    else
        (*num_downstream) = tree_width;

    /* setup the pg-specific control structure that we can fill out as
     * we get incoming connections */
    HYD_MALLOC(bstrap_control, struct bstrap_control *, sizeof(struct bstrap_control), status);
    bstrap_control->pgid = pgid;
    bstrap_control->my_proxy_id = my_proxy_id;
    bstrap_control->total_downstreams = (*num_downstream);
    bstrap_control->fd_control_hash = NULL;
    bstrap_control->real_proxy_id_hash = NULL;
    bstrap_control->current_downstreams = 0;

    HYD_MALLOC(proxy_id, int *, (*num_downstream) * sizeof(int), status);
    HYD_MALLOC(pid, int *, (*num_downstream) * sizeof(int), status);


    /* setup a local listening socket for proxies to connect back to
     * us, if needed */
    if (port_range) {
        status = HYD_sock_listen_on_port_range(&listen_fd, port_range, &port);
        HYD_ERR_POP(status, "create listening on port range\n");
    } else {
        status = HYD_sock_listen_on_any_port(&listen_fd, &port);
        HYD_ERR_POP(status, "create listening on any port\n");
    }

    for (i = 0; i < num_nodes; i++)
        if (MPL_host_is_local(node_list[i].hostname))
            break;

    if (i < num_nodes)
        localhost = MPL_strdup(node_list[i].hostname);
    else {
        HYD_MALLOC(localhost, char *, HYD_MAX_HOSTNAME_LEN, status);
        if (gethostname(localhost, HYD_MAX_HOSTNAME_LEN) < 0)
            HYD_ERR_SETANDJUMP(status, HYD_ERR_SOCK, "unable to get local hostname\n");
    }


    /* attach the bstrap_control to the listen callback, so we know
     * which pgid it belongs to */
    status = HYD_dmx_register_fd(listen_fd, HYD_DMX_POLLIN, (void *) bstrap_control, listen_cb);
    HYD_ERR_POP(status, "error registering listen_fd\n");


    /* ok, all the groundwork has been set.  now loop over the set of
     * nodes that we need to launch on and get cracking */
    for (m = 0; m < bstrap_control->total_downstreams; m++) {
        struct HYD_int_hash *proxy_hash = NULL;
        k = HYD_tree_start(num_nodes, m, tree_width);

        proxy_id[m] = my_proxy_id + k + 1;
        subtree_size = HYD_tree_size(num_nodes, m, tree_width);

        HYD_MALLOC(proxy_hash, struct HYD_int_hash *, sizeof(struct HYD_int_hash), status);
        proxy_hash->key = proxy_id[m];
        proxy_hash->val = m;
        HASH_ADD_INT(bstrap_control->real_proxy_id_hash, key, proxy_hash, MPL_MEM_PM);

        if (MPL_host_is_local(node_list[k].hostname)) {
            int sockpair[2];

            if (socketpair(AF_UNIX, SOCK_STREAM, 0, sockpair) < 0)
                HYD_ERR_SETANDJUMP(status, HYD_ERR_INTERNAL, "pipe error\n");

            /* the parent process keeps sockpair[0].  make sure it is
             * not shared by the child process. */
            status = HYD_sock_cloexec(sockpair[0]);
            HYD_ERR_POP(status, "unable to set control socket to close on exec\n");

            i = 0;

            if (getenv("HYDRA_BSTRAP_XTERM")) {
                targs[i++] = MPL_strdup("xterm");
                targs[i++] = MPL_strdup("-e");
                targs[i++] = MPL_strdup("gdb");
                /* targs[i++] = MPL_strdup("-ex=r"); */
                targs[i++] = MPL_strdup("--args");
            }

            targs[i++] = MPL_strdup(bstrap_launcher);
            targs[i++] = MPL_strdup("--upstream-fd");
            targs[i++] = HYD_str_from_int(sockpair[1]); /* the child process gets sockpair[1] */
            targs[i++] = MPL_strdup("--pgid");
            targs[i++] = HYD_str_from_int(pgid);
            targs[i++] = MPL_strdup("--proxy-id");
            targs[i++] = HYD_str_from_int(proxy_id[m]);
            targs[i++] = MPL_strdup("--node-id");
            targs[i++] = HYD_str_from_int(node_list[k].node_id);
            targs[i++] = MPL_strdup("--launcher");
            targs[i++] = MPL_strdup(launcher);
            if (launcher_exec) {
                targs[i++] = MPL_strdup("--launcher-exec");
                targs[i++] = MPL_strdup(launcher_exec);
            }
            if (port_range) {
                targs[i++] = MPL_strdup("--port-range");
                targs[i++] = MPL_strdup(port_range);
            }
            targs[i++] = MPL_strdup("--base-path");
            targs[i++] = MPL_strdup(path);
            targs[i++] = MPL_strdup("--subtree-size");
            targs[i++] = HYD_str_from_int(subtree_size);
            targs[i++] = MPL_strdup("--tree-width");
            targs[i++] = HYD_str_from_int(tree_width);
            if (debug)
                targs[i++] = MPL_strdup("--debug");
            if (pmi_args)
                for (j = 0; pmi_args[j]; j++)
                    targs[i++] = MPL_strdup(pmi_args[j]);
            targs[i++] = NULL;

            status = HYD_spawn(targs, 0, NULL, &fd_stdin, &fd_stdout, &fd_stderr, &pid[m], -1);
            HYD_ERR_POP(status, "create process returned error\n");

            HYD_str_free_list(targs);

            close(sockpair[1]);

            status = enqueue_control_fd(sockpair[0], bstrap_control);
            HYD_ERR_POP(status, "error enqueuing control fd\n");
        } else {
            i = 0;

            if (getenv("HYDRA_BSTRAP_XTERM")) {
                targs[i++] = MPL_strdup("xterm");
                targs[i++] = MPL_strdup("-e");
                targs[i++] = MPL_strdup("gdb");
                /* targs[i++] = MPL_strdup("-ex=r"); */
                targs[i++] = MPL_strdup("--args");
            }

            targs[i++] = MPL_strdup(bstrap_launcher);
            targs[i++] = MPL_strdup("--upstream-host");
            targs[i++] = MPL_strdup(localhost);
            targs[i++] = MPL_strdup("--upstream-port");
            targs[i++] = HYD_str_from_int(port);
            targs[i++] = MPL_strdup("--pgid");
            targs[i++] = HYD_str_from_int(pgid);
            targs[i++] = MPL_strdup("--proxy-id");
            targs[i++] = HYD_str_from_int(proxy_id[m]);
            targs[i++] = MPL_strdup("--node-id");
            targs[i++] = HYD_str_from_int(node_list[k].node_id);
            targs[i++] = MPL_strdup("--launcher");
            targs[i++] = MPL_strdup(launcher);
            if (launcher_exec) {
                targs[i++] = MPL_strdup("--launcher-exec");
                targs[i++] = MPL_strdup(launcher_exec);
            }
            if (port_range) {
                targs[i++] = MPL_strdup("--port-range");
                targs[i++] = MPL_strdup(port_range);
            }
            targs[i++] = MPL_strdup("--base-path");
            targs[i++] = MPL_strdup(path);
            targs[i++] = MPL_strdup("--subtree-size");
            targs[i++] = HYD_str_from_int(subtree_size);
            targs[i++] = MPL_strdup("--tree-width");
            targs[i++] = HYD_str_from_int(tree_width);
            if (debug)
                targs[i++] = MPL_strdup("--debug");
            if (pmi_args)
                for (j = 0; pmi_args[j]; j++)
                    targs[i++] = MPL_strdup(pmi_args[j]);
            targs[i++] = NULL;

            for (i = 0; bstrap_names[i]; i++)
                if (!strcmp(bstrap_names[i], launcher))
                    break;
            HYD_ASSERT(bstrap_names[i], status);

            status =
                bstrap_launch_fns[i] (node_list[k].hostname, launcher_exec, targs, &fd_stdin,
                                      &fd_stdout, &fd_stderr, &pid[m], debug);
            HYD_ERR_POP(status, "error launching bstrap proxy\n");

            HYD_str_free_list(targs);
        }

        HYD_MALLOC(hash, struct HYD_int_hash *, sizeof(struct HYD_int_hash), status);
        hash->key = fd_stdout;
        hash->val = m;
        HASH_ADD_INT(fd_stdout_hash, key, hash, MPL_MEM_PM);

        HYD_MALLOC(hash, struct HYD_int_hash *, sizeof(struct HYD_int_hash), status);
        hash->key = fd_stderr;
        hash->val = m;
        HASH_ADD_INT(fd_stderr_hash, key, hash, MPL_MEM_PM);

        if (m == 0)
            *downstream_stdin = fd_stdin;
    }

    MPL_free(localhost);
    MPL_free(bstrap_launcher);


    /* our immediate children have been launched.  wait for them to
     * connect back. */
    while (bstrap_control->current_downstreams < bstrap_control->total_downstreams) {
        status = HYD_dmx_wait_for_event(-1);
        HYD_ERR_POP(status, "error waiting for event\n");
    }

    HYD_dmx_deregister_fd(listen_fd);
    close(listen_fd);


    /* our immediate children have connected back.  send them the host
     * and env information to launch the rest of the subtree. */
    total_core_count = 0;
    for (i = 0; i < num_nodes; i++)
        total_core_count += node_list[i].core_count;
    HASH_ITER(hh, bstrap_control->fd_control_hash, hash, thash) {
        k = HYD_tree_start(num_nodes, hash->val, tree_width);
        subtree_size = HYD_tree_size(num_nodes, hash->val, tree_width);

        /* host list */
        MPL_VG_MEM_INIT(&cmd, sizeof(cmd));
        cmd.type = HYDI_BSTRAP_CMD__HOSTLIST;
        status =
            HYD_sock_write(hash->key, &cmd, sizeof(cmd), &sent, &closed,
                           HYD_SOCK_COMM_TYPE__BLOCKING);
        HYD_ERR_POP(status, "error sending command to bstrap proxy\n");
        HYD_ASSERT(!closed, status);

        status =
            HYD_sock_write(hash->key, &node_list[k], subtree_size * sizeof(struct HYD_node), &sent,
                           &closed, HYD_SOCK_COMM_TYPE__BLOCKING);
        HYD_ERR_POP(status, "error sending command to bstrap proxy\n");
        HYD_ASSERT(!closed, status);
    }

    *downstream_proxy_id = proxy_id;
    *downstream_pid = pid;

    *downstream_stdout_hash = fd_stdout_hash;
    *downstream_stderr_hash = fd_stderr_hash;
    *downstream_fd_hash = bstrap_control->fd_control_hash;

    MPL_free(bstrap_control);

  fn_exit:
    HYD_FUNC_EXIT();
    return status;

  fn_fail:
    goto fn_exit;
}

HYD_status HYD_bstrap_finalize(const char *launcher)
{
    int i;
    HYD_status status = HYD_SUCCESS;

    HYD_FUNC_ENTER();

    for (i = 0; bstrap_names[i]; i++)
        if (!strcmp(bstrap_names[i], launcher))
            break;
    HYD_ASSERT(bstrap_names[i], status);

    status = bstrap_finalize_fns[i] ();
    HYD_ERR_POP(status, "error finalizing the bstrap\n");

  fn_exit:
    HYD_FUNC_EXIT();
    return status;

  fn_fail:
    goto fn_exit;
}
