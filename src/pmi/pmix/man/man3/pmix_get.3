.TH "pmix_get" "3" "2016\-03\-01" "PMIx Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
PMIx_Get[_nb] \- Retrieve data that was pushed into the PMIx key\-value
store via calls to \f[I]PMIx_Put\f[] and \f[I]PMIx_Commit\f[].
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <pmix.h>

pmix\\_status\\_t\ PMIx\\_Get(const\ pmix\\_proc\\_t\ *proc,\ const\ char\ key[],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ pmix\\_info\\_t\ info[],\ size_t\ ninfo,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ pmix\\_value\\_t\ **val);

pmix\\_status\\_t\ PMIx_Get_nb(const\ pmix\\_proc\\_t\ *proc,\ const\ char\ key[],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ pmix\\_info\\_t\ info[],\ size_t\ ninfo,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ pmix\\_value\\_cbfunc_t\ cbfunc,\ void\ *cbdata);
\f[]
.fi
.SH ARGUMENTS
.PP
\f[I]proc\f[] : A pointer to a pmix_proc_t structure identifying the
namespace and rank of the proc whose data is being requested.
Note that a \f[I]NULL\f[] value is permitted if the specified
\f[I]key\f[] is unique within the PMIx key\-value store.
This is provided for use by the backward compatibility APIs and is
\f[I]not\f[] recommended for use by native PMIx applications.
.PP
\f[I]key\f[] : String key identifying the information.
This can be either one of the PMIx defined attributes, or a
user\-defined value
.PP
\f[I]info\f[] : An optional array of pmix_info_t structures
.PP
\f[I]ninfo\f[] : The number of pmix_info_t structures in the specified
\f[I]info\f[] array.
.PP
\f[I]val\f[] : Address where the pointer to a pmix_value_t structure
containing the data to be returned can be placed.
Note that the caller is responsible for releasing the malloc\[aq]d
storage.
The \f[I]PMIX_VALUE_FREE\f[] macro is provided for this purpose.
.SH DESCRIPTION
.PP
Retrieve information for the specified \f[I]key\f[] as published by the
process identified in the given pmix_proc_t, returning a pointer to the
value in the given address.
.PP
The blocking form of this function will block until the specified data
has been pushed into the PMIx key\-value store via a call to
\f[I]PMIx_Commit\f[] by the specified process.
The caller is responsible for freeing all memory associated with the
returned value when no longer required.
.PP
The non\-blocking form will execute the callback function once the
specified data becomes available and has been retrieved by the local
server.
Note that failure of the specified process to \f[I]put\f[] and
\f[I]commit\f[] the requested data can result in the callback function
never being executed.
.PP
The info array is used to pass user requests regarding the get
operation.
This can include:
.IP "(a)" 4
PMIX_TIMEOUT \- maximum time for the get to execute before declaring an
error.
The timeout parameter can help avoid "hangs" due to programming errors
that prevent the target proc from ever exposing its data.
.SH RETURN VALUE
.PP
Returns PMIX_SUCCESS on success.
On error, a negative value corresponding to a PMIx errno is returned.
.SH ERRORS
.PP
PMIx errno values are defined in \f[C]pmix_common.h\f[].
.SH NOTES
.PP
See \[aq]_pmix_common.h\[aq] for definition of the pmix_value_t
structure.
.SH SEE ALSO
.PP
\f[C]PMIx_Put\f[](3), \f[C]PMIx_Commit\f[](3),
\f[C]PMIx_Constants\f[](7), \f[C]PMIx_Structures\f[](7)
.SH AUTHORS
PMIx.
