.TH "pmix_fence" "3" "2016\-03\-01" "PMIx Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
PMIx_Fence[_nb] \- Execute a blocking[non\-blocking] barrier across the
processes identified in the specified array.
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <pmix.h>

pmix\\_status\\_t\ PMIx\\_Fence(const\ pmix\\_proc\\_t\ procs[],\ size_t\ nprocs,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ pmix\\_info\\_t\ info[],\ size_t\ ninfo);

pmix\\_status\\_t\ PMIx\\_Fence\\_nb(const\ pmix\\_proc\\_t\ procs[],\ size_t\ nprocs,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ pmix\\_info\\_t\ info[],\ size_t\ ninfo,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ pmix_op_cbfunc_t\ cbfunc,\ void\ *cbdata);
\f[]
.fi
.SH ARGUMENTS
.PP
\f[I]procs\f[] : An array of pmix_proc_t structures defining the
processes that will be participating in the fence collective operation.
.PP
\f[I]nprocs\f[] : Number of pmix_proc_t structures in the \f[I]procs\f[]
array
.PP
\f[I]info\f[] : An optional array of pmix_info_t structures
.PP
\f[I]ninfo\f[] : Number of pmix_info_t structures in the pmix_info_t
array
.SH DESCRIPTION
.PP
Execute a blocking[non\-blocking] barrier across the processes
identified in the specified array.
Passing a \f[I]NULL\f[] pointer as the \f[I]procs\f[] parameter
indicates that the barrier is to span all processes in the client\[aq]s
namespace.
Each provided pmix_proc_t struct can pass PMIX_RANK_WILDCARD to indicate
that all processes in the given namespace are participating.
.PP
The info array is used to pass user requests regarding the fence
operation.
This can include:
.IP "(a)" 4
PMIX_COLLECT_DATA \- a boolean indicating whether or not the barrier
operation is to return the \f[I]put\f[] data from all participating
processes.
A value of \f[I]false\f[] indicates that the callback is just used as a
release and no data is to be returned at that time.
A value of \f[I]true\f[] indicates that all \f[I]put\f[] data is to be
collected by the barrier.
Returned data is cached at the server to reduce memory footprint, and
can be retrieved as needed by calls to PMIx_Get(nb).
.RS 4
.PP
Note that for scalability reasons, the default behavior for PMIx_Fence
is to \f[I]not\f[] collect the data.
.RE
.IP "(b)" 4
PMIX_COLLECTIVE_ALGO \- a comma\-delimited string indicating the algos
to be used for executing the barrier, in priority order.
Note that PMIx itself does not contain any internode communication
support.
Thus, execution of the \f[I]fence\f[] collective is deferred to the host
resource manager, which are free to implement whatever algorithms they
choose.
Thus, different resource managers may or may not be able to comply with
a request for a specific algorithm, or set of algorithms.
Marking this info key as \f[I]required\f[] instructs the host RM that it
should return an error if none of the specified algos are available.
Otherwise, the RM is to use one of the specified algos if possible, but
is free to use any of its available methods to execute the operation if
none of the specified algos are available.
.IP "(c)" 4
PMIX_TIMEOUT \- maximum time for the fence to execute before declaring
an error.
By default, the RM shall terminate the operation and notify participants
if one or more of the indicated procs fails during the fence.
However, the timeout parameter can help avoid "hangs" due to programming
errors that prevent one or more procs from reaching the "fence".
.SH RETURN VALUE
.PP
Returns PMIX_SUCCESS on success.
On error, a negative value corresponding to a PMIx errno is returned.
.SH ERRORS
.PP
PMIx errno values are defined in \f[C]pmix_common.h\f[].
.SH NOTES
.SH SEE ALSO
.PP
\f[C]PMIx_Put\f[](3), \f[C]PMIx_Commit\f[](3),
\f[C]PMIx_Constants\f[](7)
.SH AUTHORS
PMIx.
