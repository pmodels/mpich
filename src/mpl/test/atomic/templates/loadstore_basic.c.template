/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
/*
 *  (C) 2019 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */

#include "atomic_test.h"

BASE_TYPE test_values[] = TEST_VALUES;

int main()
{
    int i;
    /* load */
    for (i = 0; i < sizeof(test_values) / sizeof(BASE_TYPE); i++) {
        BASE_TYPE val = test_values[i];
        ATOMIC_TYPE atomic_val1 = ATOMIC_INITIALIZER(val);
        ATOMIC_TYPE atomic_val2, atomic_val3;
        ATOMIC_RELAXED_STORE(&atomic_val2, val);
        ATOMIC_RELEASE_STORE(&atomic_val3, val);

        TEST_ASSERT(ATOMIC_RELAXED_LOAD(&atomic_val1) == val);
        TEST_ASSERT(ATOMIC_RELAXED_LOAD(&atomic_val2) == val);
        TEST_ASSERT(ATOMIC_RELAXED_LOAD(&atomic_val3) == val);
    }
    for (i = 0; i < sizeof(test_values) / sizeof(BASE_TYPE); i++) {
        BASE_TYPE val = test_values[i];
        ATOMIC_TYPE atomic_val1 = ATOMIC_INITIALIZER(val);
        ATOMIC_TYPE atomic_val2, atomic_val3;
        ATOMIC_RELAXED_STORE(&atomic_val2, val);
        ATOMIC_RELEASE_STORE(&atomic_val3, val);

        TEST_ASSERT(ATOMIC_ACQUIRE_LOAD(&atomic_val1) == val);
        TEST_ASSERT(ATOMIC_ACQUIRE_LOAD(&atomic_val2) == val);
        TEST_ASSERT(ATOMIC_ACQUIRE_LOAD(&atomic_val3) == val);
    }
    /* store */
    for (i = 0; i < sizeof(test_values) / sizeof(BASE_TYPE); i++) {
        BASE_TYPE val = test_values[i];
        ATOMIC_TYPE atomic_val;
        ATOMIC_RELAXED_STORE(&atomic_val, val);
        TEST_ASSERT(ATOMIC_RELAXED_LOAD(&atomic_val) == val);
    }
    for (i = 0; i < sizeof(test_values) / sizeof(BASE_TYPE); i++) {
        BASE_TYPE val = test_values[i];
        ATOMIC_TYPE atomic_val;
        ATOMIC_RELAXED_STORE(&atomic_val, val);
        TEST_ASSERT(ATOMIC_ACQUIRE_LOAD(&atomic_val) == val);
    }
    for (i = 0; i < sizeof(test_values) / sizeof(BASE_TYPE); i++) {
        BASE_TYPE val = test_values[i];
        ATOMIC_TYPE atomic_val;
        ATOMIC_RELEASE_STORE(&atomic_val, val);
        TEST_ASSERT(ATOMIC_RELAXED_LOAD(&atomic_val) == val);
    }
    for (i = 0; i < sizeof(test_values) / sizeof(BASE_TYPE); i++) {
        BASE_TYPE val = test_values[i];
        ATOMIC_TYPE atomic_val;
        ATOMIC_RELEASE_STORE(&atomic_val, val);
        TEST_ASSERT(ATOMIC_ACQUIRE_LOAD(&atomic_val) == val);
    }
    return 0;
}
