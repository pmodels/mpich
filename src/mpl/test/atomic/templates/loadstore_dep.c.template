/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
/*
 *  (C) 2019 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */

#include "atomic_test.h"

typedef struct deptest_t {
    int tid;
    int num_threads;
    BASE_TYPE val1;
    BASE_TYPE val2;
    ATOMIC_TYPE *p_atomic_val;
    ATOMIC_TYPE *p_barrier_val;
    int *p_data;
} deptest_t;

BASE_TYPE test_values[] = TEST_VALUES;

static void deptest_acq_rel(int num_threads, int tid, void *arg);
static void deptest_barrier(int num_threads, int tid, void *arg);

int main()
{
#ifdef MPL_USE_NO_ATOMIC_PRIMITIVES
    return 0;
#else
    int i, j;
    int *p_buffer = (int *)malloc(sizeof(int) * 2000);
    for (i = 0; i < sizeof(test_values) / sizeof(BASE_TYPE); i++) {
        for (j = 0; j < sizeof(test_values) / sizeof(BASE_TYPE); j++) {
            BASE_TYPE val1 = test_values[i];
            BASE_TYPE val2 = test_values[j];
            ATOMIC_TYPE atomic_val = ATOMIC_INITIALIZER(val1);
            ATOMIC_TYPE barrier_val = ATOMIC_INITIALIZER(val1);
            deptest_t deptest_arg;
            if (val1 == val2)
                continue;
            deptest_arg.p_atomic_val = &atomic_val;
            deptest_arg.p_barrier_val = &barrier_val;
            deptest_arg.val1 = val1;
            deptest_arg.val2 = val2;
            deptest_arg.p_data = &p_buffer[1000]; /* avoid cache line sharing */
            test_parallel_for(2, deptest_acq_rel, &deptest_arg);
            test_parallel_for(2, deptest_barrier, &deptest_arg);
        }
    }
    free(p_buffer);
    return 0;
#endif
}

static void thread_barrier(int tid, ATOMIC_TYPE *p_barrier_val, BASE_TYPE val1, BASE_TYPE val2)
{
    if (tid == 0) {
        while (ATOMIC_ACQUIRE_LOAD(p_barrier_val) != val2);
        ATOMIC_RELEASE_STORE(p_barrier_val, val1);
    } else {
        TEST_ASSERT(ATOMIC_ACQUIRE_LOAD(p_barrier_val) == val1);
        ATOMIC_RELEASE_STORE(p_barrier_val, val2);
        while (ATOMIC_ACQUIRE_LOAD(p_barrier_val) != val1);
    }
}

static void deptest_acq_rel(int num_threads, int tid, void *arg)
{
    deptest_t *deptest_arg = (deptest_t *)arg;
    int *p_data = deptest_arg->p_data;
    BASE_TYPE val1 = deptest_arg->val1;
    BASE_TYPE val2 = deptest_arg->val2;
    ATOMIC_TYPE *p_atomic_val = deptest_arg->p_atomic_val;
    ATOMIC_TYPE *p_barrier_val = deptest_arg->p_barrier_val;
    int i;

    for (i = 0; i < 8192; i++) {
        /* store before release-store must be flushed before release-store */
        /* load after acquire-load must be performed after acquire-load */
        if (tid == 0) {
            TEST_ASSERT(ATOMIC_ACQUIRE_LOAD(p_atomic_val) == val1);
            *p_data = 1;
            ATOMIC_RELEASE_STORE(p_atomic_val, val2);
        } else {
            int val = *p_data; /* dummy */
            while (ATOMIC_ACQUIRE_LOAD(p_atomic_val) != val2);
            val = *p_data;
            TEST_ASSERT(val == 1);
        }

        thread_barrier(tid, p_barrier_val, val1, val2);
        if (tid == 0) {
            ATOMIC_RELEASE_STORE(p_atomic_val, val1);
            *p_data = 0;
        }
        thread_barrier(tid, p_barrier_val, val1, val2);
    }
}

static void deptest_barrier(int num_threads, int tid, void *arg)
{
    deptest_t *deptest_arg = (deptest_t *)arg;
    int *p_data = deptest_arg->p_data;
    BASE_TYPE val1 = deptest_arg->val1;
    BASE_TYPE val2 = deptest_arg->val2;
    ATOMIC_TYPE *p_atomic_val = deptest_arg->p_atomic_val;
    ATOMIC_TYPE *p_barrier_val = deptest_arg->p_barrier_val;
    int i;

    for (i = 0; i < 8192; i++) {
        /* store before write-barrier must be flushed */
        /* load after read-barrier must be performed after barrier */
        if (tid == 0) {
            TEST_ASSERT(ATOMIC_RELAXED_LOAD(p_atomic_val) == val1);
            *p_data = 1;
            MPL_atomic_write_barrier();
            ATOMIC_RELAXED_STORE(p_atomic_val, val2);
            MPL_atomic_write_barrier();
        } else {
            int val = *p_data; /* dummy */
            while (ATOMIC_RELAXED_LOAD(p_atomic_val) != val2)
                MPL_atomic_read_barrier();
            val = *p_data;
            TEST_ASSERT(val == 1);
        }

        thread_barrier(tid, p_barrier_val, val1, val2);

        /* read-write barrier version */
        if (tid == 0) {
            TEST_ASSERT(ATOMIC_RELAXED_LOAD(p_atomic_val) == val2);
            *p_data = 0;
            MPL_atomic_read_write_barrier();
            ATOMIC_RELAXED_STORE(p_atomic_val, val1);
            MPL_atomic_read_write_barrier();
        } else {
            int val = *p_data; /* dummy */
            while (ATOMIC_RELAXED_LOAD(p_atomic_val) != val1)
                MPL_atomic_read_write_barrier();
            val = *p_data;
            TEST_ASSERT(val == 0);
        }

        thread_barrier(tid, p_barrier_val, val1, val2);
    }
}
